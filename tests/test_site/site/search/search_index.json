{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs AI Assistant Test Site Welcome to the test site for the MkDocs AI Assistant plugin! What is MkDocs AI Assistant? MkDocs AI Assistant is a powerful plugin that brings AI capabilities to your MkDocs documentation: Document Generation : Create documentation from prompts, templates, or assets Content Enhancement : Automatically improve grammar, clarity, and consistency Semantic Search : Find content using natural language queries Asset Processing : Generate docs from code, Docker Compose files, and more Obelisk Integration : Connect with Obelisk for RAG-powered chatbot Quick Example Try the AI generation feature with markdown syntax: Features Priority 1: Document Generation Generate documentation using multiple methods: # CLI generation mkdocs ai generate \"Create a guide to Kubernetes basics\" # Markdown syntax <!-- AI-GENERATE: Explain microservices architecture --> # Config-based batch generation # See mkdocs.yml for examples Priority 2: Content Enhancement Automatically improve your documentation: Grammar and spelling corrections Clarity improvements Consistency checking SEO optimization Priority 3: Semantic Search Find content using natural language: Build-time embedding generation Hybrid search (keyword + semantic) Portable JSON index Priority 4: Asset Processing Generate documentation from: Docker Compose files Source code (Python, JavaScript, etc.) OpenAPI specifications And more! Priority 5: Obelisk Integration Connect with Obelisk for advanced features: RAG-powered chatbot Conversational documentation search FAQ generation from user questions Getting Started Install the plugin Configure your site Explore features See examples Architecture The plugin is built with a modular architecture: mkdocs_ai/ \u251c\u2500\u2500 providers/ # AI provider abstraction (OpenRouter, Gemini, Ollama) \u251c\u2500\u2500 generation/ # Document generation engine \u251c\u2500\u2500 enhancement/ # Content enhancement features \u251c\u2500\u2500 search/ # Semantic search integration \u251c\u2500\u2500 assets/ # Asset-to-docs processors \u251c\u2500\u2500 cache/ # Response caching system \u2514\u2500\u2500 obelisk/ # Obelisk integration layer Provider Support OpenRouter : Multi-model access (primary) Gemini : Google's models (testing) Anthropic : Claude models (direct) Ollama : Local LLM support (future) Development Status This is an active development project. Current phase: [x] Project structure [x] Provider abstraction [x] Configuration system [x] Caching layer [ ] Document generation (in progress) [ ] Content enhancement [ ] Semantic search [ ] Asset processing [ ] Obelisk integration Contributing This is a personal project but contributions are welcome! See the main README for details. License MIT License - See LICENSE file for details.","title":"Home"},{"location":"#mkdocs-ai-assistant-test-site","text":"Welcome to the test site for the MkDocs AI Assistant plugin!","title":"MkDocs AI Assistant Test Site"},{"location":"#what-is-mkdocs-ai-assistant","text":"MkDocs AI Assistant is a powerful plugin that brings AI capabilities to your MkDocs documentation: Document Generation : Create documentation from prompts, templates, or assets Content Enhancement : Automatically improve grammar, clarity, and consistency Semantic Search : Find content using natural language queries Asset Processing : Generate docs from code, Docker Compose files, and more Obelisk Integration : Connect with Obelisk for RAG-powered chatbot","title":"What is MkDocs AI Assistant?"},{"location":"#quick-example","text":"Try the AI generation feature with markdown syntax:","title":"Quick Example"},{"location":"#features","text":"","title":"Features"},{"location":"#priority-1-document-generation","text":"Generate documentation using multiple methods: # CLI generation mkdocs ai generate \"Create a guide to Kubernetes basics\" # Markdown syntax <!-- AI-GENERATE: Explain microservices architecture --> # Config-based batch generation # See mkdocs.yml for examples","title":"Priority 1: Document Generation"},{"location":"#priority-2-content-enhancement","text":"Automatically improve your documentation: Grammar and spelling corrections Clarity improvements Consistency checking SEO optimization","title":"Priority 2: Content Enhancement"},{"location":"#priority-3-semantic-search","text":"Find content using natural language: Build-time embedding generation Hybrid search (keyword + semantic) Portable JSON index","title":"Priority 3: Semantic Search"},{"location":"#priority-4-asset-processing","text":"Generate documentation from: Docker Compose files Source code (Python, JavaScript, etc.) OpenAPI specifications And more!","title":"Priority 4: Asset Processing"},{"location":"#priority-5-obelisk-integration","text":"Connect with Obelisk for advanced features: RAG-powered chatbot Conversational documentation search FAQ generation from user questions","title":"Priority 5: Obelisk Integration"},{"location":"#getting-started","text":"Install the plugin Configure your site Explore features See examples","title":"Getting Started"},{"location":"#architecture","text":"The plugin is built with a modular architecture: mkdocs_ai/ \u251c\u2500\u2500 providers/ # AI provider abstraction (OpenRouter, Gemini, Ollama) \u251c\u2500\u2500 generation/ # Document generation engine \u251c\u2500\u2500 enhancement/ # Content enhancement features \u251c\u2500\u2500 search/ # Semantic search integration \u251c\u2500\u2500 assets/ # Asset-to-docs processors \u251c\u2500\u2500 cache/ # Response caching system \u2514\u2500\u2500 obelisk/ # Obelisk integration layer","title":"Architecture"},{"location":"#provider-support","text":"OpenRouter : Multi-model access (primary) Gemini : Google's models (testing) Anthropic : Claude models (direct) Ollama : Local LLM support (future)","title":"Provider Support"},{"location":"#development-status","text":"This is an active development project. Current phase: [x] Project structure [x] Provider abstraction [x] Configuration system [x] Caching layer [ ] Document generation (in progress) [ ] Content enhancement [ ] Semantic search [ ] Asset processing [ ] Obelisk integration","title":"Development Status"},{"location":"#contributing","text":"This is a personal project but contributions are welcome! See the main README for details.","title":"Contributing"},{"location":"#license","text":"MIT License - See LICENSE file for details.","title":"License"},{"location":"examples/advanced/","text":"Advanced \ud83d\udea7 Under development","title":"Advanced"},{"location":"examples/advanced/#advanced","text":"\ud83d\udea7 Under development","title":"Advanced"},{"location":"examples/ai-generation-test/","text":"AI Generation Test Page This page demonstrates AI-powered document generation. Simple Generation Block Generation This content will be replaced by AI-generated content. Manual Content This section is written manually and won't be touched by AI. Status \u2705 Simple generation syntax \u2705 Block generation syntax \ud83d\udea7 Waiting for API key to test actual generation","title":"AI Generation Test Page"},{"location":"examples/ai-generation-test/#ai-generation-test-page","text":"This page demonstrates AI-powered document generation.","title":"AI Generation Test Page"},{"location":"examples/ai-generation-test/#simple-generation","text":"","title":"Simple Generation"},{"location":"examples/ai-generation-test/#block-generation","text":"This content will be replaced by AI-generated content.","title":"Block Generation"},{"location":"examples/ai-generation-test/#manual-content","text":"This section is written manually and won't be touched by AI.","title":"Manual Content"},{"location":"examples/ai-generation-test/#status","text":"\u2705 Simple generation syntax \u2705 Block generation syntax \ud83d\udea7 Waiting for API key to test actual generation","title":"Status"},{"location":"examples/basic/","text":"Basic \ud83d\udea7 Under development","title":"Basic Usage"},{"location":"examples/basic/#basic","text":"\ud83d\udea7 Under development","title":"Basic"},{"location":"features/enhancement/","text":"Enhancement \ud83d\udea7 Under development","title":"Content Enhancement"},{"location":"features/enhancement/#enhancement","text":"\ud83d\udea7 Under development","title":"Enhancement"},{"location":"features/generation/","text":"Generation \ud83d\udea7 Under development","title":"Document Generation"},{"location":"features/generation/#generation","text":"\ud83d\udea7 Under development","title":"Generation"},{"location":"features/search/","text":"Search \ud83d\udea7 Under development","title":"Semantic Search"},{"location":"features/search/#search","text":"\ud83d\udea7 Under development","title":"Search"},{"location":"generated/","text":"Index \ud83d\udea7 Under development","title":"Index"},{"location":"generated/#index","text":"\ud83d\udea7 Under development","title":"Index"},{"location":"getting-started/installation/","text":"Installation Prerequisites Python 3.11 or higher MkDocs 1.6.0 or higher Material for MkDocs theme (recommended) Install from Source Since this is currently in development, install from source: cd mkdocs-ai-assistant pip install -e . This installs the plugin in editable mode, allowing you to make changes and test them immediately. Dependencies The plugin will install these dependencies: mkdocs>=1.6.0 - MkDocs core httpx>=0.27.0 - Async HTTP client for AI APIs pydantic>=2.0.0 - Data validation click>=8.1.0 - CLI support rich>=13.0.0 - Beautiful terminal output diskcache>=5.6.0 - Persistent caching Optional Dependencies For Semantic Search pip install -e \".[search]\" Adds: - numpy - Numerical operations - chromadb - Vector database (future) For Obelisk Integration pip install -e \".[obelisk]\" Adds: - requests - Obelisk API client For Development pip install -e \".[dev]\" Adds testing and code quality tools. Verify Installation Check that the plugin is installed: mkdocs --version You should see ai-assistant in the list of installed plugins. API Keys The plugin requires API keys for AI providers. Set them as environment variables: OpenRouter (Recommended) export OPENROUTER_API_KEY = \"your-key-here\" Gemini (Testing) export GEMINI_API_KEY = \"your-key-here\" Anthropic (Direct) export ANTHROPIC_API_KEY = \"your-key-here\" Ollama (Local) No API key needed. Just ensure Ollama is running: ollama serve Next Steps Quick Start Guide Configuration Options Basic Examples","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#prerequisites","text":"Python 3.11 or higher MkDocs 1.6.0 or higher Material for MkDocs theme (recommended)","title":"Prerequisites"},{"location":"getting-started/installation/#install-from-source","text":"Since this is currently in development, install from source: cd mkdocs-ai-assistant pip install -e . This installs the plugin in editable mode, allowing you to make changes and test them immediately.","title":"Install from Source"},{"location":"getting-started/installation/#dependencies","text":"The plugin will install these dependencies: mkdocs>=1.6.0 - MkDocs core httpx>=0.27.0 - Async HTTP client for AI APIs pydantic>=2.0.0 - Data validation click>=8.1.0 - CLI support rich>=13.0.0 - Beautiful terminal output diskcache>=5.6.0 - Persistent caching","title":"Dependencies"},{"location":"getting-started/installation/#optional-dependencies","text":"","title":"Optional Dependencies"},{"location":"getting-started/installation/#for-semantic-search","text":"pip install -e \".[search]\" Adds: - numpy - Numerical operations - chromadb - Vector database (future)","title":"For Semantic Search"},{"location":"getting-started/installation/#for-obelisk-integration","text":"pip install -e \".[obelisk]\" Adds: - requests - Obelisk API client","title":"For Obelisk Integration"},{"location":"getting-started/installation/#for-development","text":"pip install -e \".[dev]\" Adds testing and code quality tools.","title":"For Development"},{"location":"getting-started/installation/#verify-installation","text":"Check that the plugin is installed: mkdocs --version You should see ai-assistant in the list of installed plugins.","title":"Verify Installation"},{"location":"getting-started/installation/#api-keys","text":"The plugin requires API keys for AI providers. Set them as environment variables:","title":"API Keys"},{"location":"getting-started/installation/#openrouter-recommended","text":"export OPENROUTER_API_KEY = \"your-key-here\"","title":"OpenRouter (Recommended)"},{"location":"getting-started/installation/#gemini-testing","text":"export GEMINI_API_KEY = \"your-key-here\"","title":"Gemini (Testing)"},{"location":"getting-started/installation/#anthropic-direct","text":"export ANTHROPIC_API_KEY = \"your-key-here\"","title":"Anthropic (Direct)"},{"location":"getting-started/installation/#ollama-local","text":"No API key needed. Just ensure Ollama is running: ollama serve","title":"Ollama (Local)"},{"location":"getting-started/installation/#next-steps","text":"Quick Start Guide Configuration Options Basic Examples","title":"Next Steps"},{"location":"getting-started/quick-start/","text":"Quick Start Get up and running with MkDocs AI Assistant in minutes. 1. Configure the Plugin Add to your mkdocs.yml : plugins : - search - ai-assistant : provider : name : openrouter api_key : !ENV OPENROUTER_API_KEY model : anthropic/claude-3.5-sonnet generation : enabled : true cache : enabled : true 2. Set Your API Key export OPENROUTER_API_KEY = \"your-key-here\" 3. Generate Your First Document Method 1: CLI mkdocs ai generate \"Create a comprehensive guide to Docker Compose\" This will create a new markdown file in docs/generated/ . Method 2: Markdown Syntax Add this to any markdown file: <!-- AI-GENERATE: Explain the benefits of using MkDocs for documentation --> When you build your site, the AI will generate content and replace this comment. Method 3: Config-Based Add generation tasks to mkdocs.yml : plugins : - ai-assistant : generation : tasks : - prompt : \"Create API reference documentation\" output : docs/api/reference.md - prompt : \"Write a getting started guide\" output : docs/getting-started.md Run the build: mkdocs build 4. Test the Site Start the development server: mkdocs serve Visit http://localhost:8000 to see your AI-generated documentation! 5. Enable More Features Content Enhancement Automatically improve your documentation: plugins : - ai-assistant : enhancement : enabled : true auto_enhance : true features : - grammar - clarity - consistency Semantic Search Add AI-powered search: plugins : - ai-assistant : search : enabled : true embeddings_model : text-embedding-3-small Common Workflows Personal Knowledge Base Perfect for organizing research and homelab documentation: plugins : - ai-assistant : generation : enabled : true output_dir : docs/research assets : enabled : true sources : - type : docker-compose path : ../homelab pattern : \"**/*compose*.yml\" output_dir : docs/homelab API Documentation Generate docs from code: plugins : - ai-assistant : assets : enabled : true sources : - type : code path : ../src languages : [ python , javascript ] output_dir : docs/api Tips Use Caching : Enable caching to save costs and speed up builds Start Simple : Begin with document generation, add features gradually Review Output : Always review AI-generated content before publishing Experiment : Try different models and prompts to find what works best Troubleshooting Plugin Not Found Make sure you installed the plugin: pip install -e /path/to/mkdocs-ai-assistant API Key Errors Verify your API key is set: echo $OPENROUTER_API_KEY Generation Fails Check the logs: mkdocs build --verbose Enable debug mode in config: plugins : - ai-assistant : debug : true Next Steps Explore Generation Features Learn About Enhancement See Advanced Examples","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"Get up and running with MkDocs AI Assistant in minutes.","title":"Quick Start"},{"location":"getting-started/quick-start/#1-configure-the-plugin","text":"Add to your mkdocs.yml : plugins : - search - ai-assistant : provider : name : openrouter api_key : !ENV OPENROUTER_API_KEY model : anthropic/claude-3.5-sonnet generation : enabled : true cache : enabled : true","title":"1. Configure the Plugin"},{"location":"getting-started/quick-start/#2-set-your-api-key","text":"export OPENROUTER_API_KEY = \"your-key-here\"","title":"2. Set Your API Key"},{"location":"getting-started/quick-start/#3-generate-your-first-document","text":"","title":"3. Generate Your First Document"},{"location":"getting-started/quick-start/#method-1-cli","text":"mkdocs ai generate \"Create a comprehensive guide to Docker Compose\" This will create a new markdown file in docs/generated/ .","title":"Method 1: CLI"},{"location":"getting-started/quick-start/#method-2-markdown-syntax","text":"Add this to any markdown file: <!-- AI-GENERATE: Explain the benefits of using MkDocs for documentation --> When you build your site, the AI will generate content and replace this comment.","title":"Method 2: Markdown Syntax"},{"location":"getting-started/quick-start/#method-3-config-based","text":"Add generation tasks to mkdocs.yml : plugins : - ai-assistant : generation : tasks : - prompt : \"Create API reference documentation\" output : docs/api/reference.md - prompt : \"Write a getting started guide\" output : docs/getting-started.md Run the build: mkdocs build","title":"Method 3: Config-Based"},{"location":"getting-started/quick-start/#4-test-the-site","text":"Start the development server: mkdocs serve Visit http://localhost:8000 to see your AI-generated documentation!","title":"4. Test the Site"},{"location":"getting-started/quick-start/#5-enable-more-features","text":"","title":"5. Enable More Features"},{"location":"getting-started/quick-start/#content-enhancement","text":"Automatically improve your documentation: plugins : - ai-assistant : enhancement : enabled : true auto_enhance : true features : - grammar - clarity - consistency","title":"Content Enhancement"},{"location":"getting-started/quick-start/#semantic-search","text":"Add AI-powered search: plugins : - ai-assistant : search : enabled : true embeddings_model : text-embedding-3-small","title":"Semantic Search"},{"location":"getting-started/quick-start/#common-workflows","text":"","title":"Common Workflows"},{"location":"getting-started/quick-start/#personal-knowledge-base","text":"Perfect for organizing research and homelab documentation: plugins : - ai-assistant : generation : enabled : true output_dir : docs/research assets : enabled : true sources : - type : docker-compose path : ../homelab pattern : \"**/*compose*.yml\" output_dir : docs/homelab","title":"Personal Knowledge Base"},{"location":"getting-started/quick-start/#api-documentation","text":"Generate docs from code: plugins : - ai-assistant : assets : enabled : true sources : - type : code path : ../src languages : [ python , javascript ] output_dir : docs/api","title":"API Documentation"},{"location":"getting-started/quick-start/#tips","text":"Use Caching : Enable caching to save costs and speed up builds Start Simple : Begin with document generation, add features gradually Review Output : Always review AI-generated content before publishing Experiment : Try different models and prompts to find what works best","title":"Tips"},{"location":"getting-started/quick-start/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"getting-started/quick-start/#plugin-not-found","text":"Make sure you installed the plugin: pip install -e /path/to/mkdocs-ai-assistant","title":"Plugin Not Found"},{"location":"getting-started/quick-start/#api-key-errors","text":"Verify your API key is set: echo $OPENROUTER_API_KEY","title":"API Key Errors"},{"location":"getting-started/quick-start/#generation-fails","text":"Check the logs: mkdocs build --verbose Enable debug mode in config: plugins : - ai-assistant : debug : true","title":"Generation Fails"},{"location":"getting-started/quick-start/#next-steps","text":"Explore Generation Features Learn About Enhancement See Advanced Examples","title":"Next Steps"}]}